{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithms/Nematode.js","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isStart","coloring","isEnd","id","className","Component","nematode","grid","startNode","endNode","maxDist","node","dist","Math","pow","abs","updateDist","visitedNodesInOrder","curNode","getNeighbors","neighbors","neighborDists","totalDist","length","r","random","i","push","neighborDist","PathFindingVisualizer","getInitialGrid","setState","animateNematode","setTimeout","document","getElementById","onClick","visualizeNematode","map","rowIdx","nodeIdx","createNode","Infinity","currentRow","App","useState","vizKey","setVizKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b6e0339.chunk.js","sourcesContent":["// (c) 2020 eric wang \r\nimport React , {Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}; \r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row, \r\n            col, \r\n            isStart,\r\n            isEnd,\r\n        } = this.props; \r\n        const coloring = isEnd ? 'node-end' : isStart ? 'node-start' : '';\r\n        return (\r\n            <div \r\n                id = {`node-${row}-${col}`}\r\n                className={`node ${coloring}`}> \r\n            </div> \r\n        );\r\n    }\r\n}","// (c) 2020 eric wang  \r\n\r\nexport function nematode(grid,startNode,endNode) {\r\n    updateDist(grid,endNode); \r\n    const visitedNodesInOrder = [];\r\n    var curNode = startNode;  \r\n    while((curNode!==endNode)) {    \r\n        const [neighbors,neighborDists] = getNeighbors(curNode,grid);\r\n        const totalDist = neighborDists[neighborDists.length-1]; \r\n        const r = Math.random()*totalDist; \r\n        for(let i=0; i<neighborDists.length; i++) {\r\n            if(r <= neighborDists[i]) {\r\n                curNode = neighbors[i];\r\n                visitedNodesInOrder.push(curNode); \r\n                break; \r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder; \r\n}\r\n\r\nfunction getNeighbors(node,grid) {\r\n    const neighbors = []; \r\n    const neighborDists = []; \r\n    const {row,col} = node; \r\n    var neighborDist = 0;\r\n    if(row>0) {\r\n        neighbors.push(grid[row-1][col]);\r\n        neighborDist+=grid[row-1][col].dist; \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(row<grid.length-1) {\r\n        neighbors.push(grid[row+1][col]);\r\n        neighborDist+=grid[row+1][col].dist; \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(col>0) {\r\n        neighbors.push(grid[row][col-1]);\r\n        neighborDist+=grid[row][col-1].dist; \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(col<grid[0].length-1) {\r\n        neighbors.push(grid[row][col+1]); \r\n        neighborDist+=grid[row][col+1].dist; \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    return [neighbors,neighborDists]; \r\n}\r\n\r\nfunction updateDist(grid,endNode) {\r\n    const maxDist = endNode.row+endNode.col; \r\n    for(const row of grid) {\r\n        for(const node of row) {\r\n            node.dist = Math.pow((maxDist - (Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col))),10);\r\n        }\r\n    }\r\n}","// (c) 2020 eric wang \r\nimport React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {nematode} from '../Algorithms/Nematode'; \r\n\r\nimport './PathFindingVisualizer.css';\r\n\r\nconst START_ROW = 0; \r\nconst START_COL = 0; \r\nconst END_ROW = 19; \r\nconst END_COL = 49; \r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n        }; \r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid(); \r\n        this.setState({grid});\r\n    }\r\n\r\n    visualizeNematode() {\r\n        const {grid} = this.state; \r\n        const startNode = grid[START_ROW][START_COL]; \r\n        const endNode = grid[END_ROW][END_COL]; \r\n        const visitedNodesInOrder = nematode(grid,startNode,endNode);\r\n        this.animateNematode(visitedNodesInOrder);  \r\n    }\r\n\r\n    animateNematode(visitedNodesInOrder) {\r\n        for(let i=0; i<visitedNodesInOrder.length-1; i++) {\r\n            const node = visitedNodesInOrder[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-visited';\r\n            }, 50 * (i+1) - 50); \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                'node node-seen';\r\n            }, 50 * (i+1) - 25); \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state; \r\n        return (\r\n            <>\r\n            <button onClick={() => this.visualizeNematode()}>\r\n                Visualize Nematode\r\n            </button>\r\n            <div className = \"grid\"> \r\n                {grid.map((row,rowIdx) => {\r\n                    return <div key={rowIdx}>\r\n                        {row.map((node,nodeIdx) => {\r\n                            const {row,col,isStart,isEnd} = node; \r\n                            return (\r\n                                <Node\r\n                                key = {nodeIdx}\r\n                                row = {row}\r\n                                col = {col}\r\n                                isStart = {isStart}\r\n                                isEnd = {isEnd}\r\n                                ></Node>\r\n                            );\r\n                        })}\r\n                    </div> \r\n                })}\r\n            </div> \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst createNode = (row,col) => {\r\n    return {\r\n        row, \r\n        col, \r\n        isStart : row === START_ROW && col === START_COL,\r\n        isEnd : row === END_ROW && col === END_COL,  \r\n        dist : Infinity, \r\n    };\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\n\nfunction App() {\n  const [vizKey,setVizKey] = useState(0); \n  const reset = () => {\n    setVizKey(vizKey+1);\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={reset}>\n        Reset\n      </button>\n      <PathFindingVisualizer key = {vizKey}></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}