{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/Neuron/Neuron.jsx","Algorithms/Nematode.js","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isStart","isEnd","isWall","onMouseDown","onMouseEnter","onMouseUp","coloring","id","className","Component","Neuron","tag","type","nematode","grid","startNode","endNode","node","dist","Math","abs","updateDist","visitedNodesInOrder","curNode","count","getNeighbors","neighbors","neighborDists","totalDist","length","r","random","i","console","log","push","dir","nextRow","nextCol","sort","nodeA","nodeB","sortByDist","neighborDist","pow","PathFindingVisualizer","circuit","mouseIsPressed","getInitialGrid","getInitialCircuit","setState","newGrid","getNewGridWithWallToggled","animateNematode","prev","setTimeout","document","getElementById","onClick","visualizeNematode","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","colIdx","neuron","neuronIdx","createNode","Infinity","currentRow","createNeuron","col_1","col_3","slice","newNode","App","useState","vizKey","setVizKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c626f5a0.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}; \r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row, \r\n            col, \r\n            isStart,\r\n            isEnd,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n        } = this.props; \r\n        const coloring = isEnd ? 'node-end' : isStart ? 'node-start' : isWall ? 'node-wall' : '';\r\n        return (\r\n            <div \r\n                id = {`node-${row}-${col}`}\r\n                className={`node ${coloring}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}\r\n            ></div> \r\n        );\r\n    }\r\n}","import React , {Component} from 'react';\r\nimport './Neuron.css';\r\n\r\nexport default class Neuron extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}; \r\n    }\r\n\r\n    render() {\r\n        const {\r\n            tag,\r\n        } = this.props; \r\n        const type = tag==='AWC' ? 'neuron' : 'inter-neuron';\r\n        return (\r\n            <div \r\n                id = {`neuron-${tag}`}\r\n                className = {`${type}`}>\r\n                {tag}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//yo the css subclasses have to be underneath the higher ones ","\r\n//nematode algorithm for choosing path \r\nexport function nematode(grid,startNode,endNode) {\r\n    updateDist(grid,endNode); \r\n    const visitedNodesInOrder = [];\r\n    var curNode = startNode;  \r\n    var count = 1000; \r\n    while((curNode!==endNode) && count) {   \r\n        count--; \r\n        const [neighbors,neighborDists] = getNeighbors(curNode,grid,endNode);\r\n        const totalDist = neighborDists[neighborDists.length-1]; \r\n        const r = Math.random()*totalDist; \r\n        for(let i=0; i<neighborDists.length; i++) {\r\n            if(r <= neighborDists[i]) {\r\n                curNode = neighbors[i];\r\n                console.log(neighborDists); \r\n                visitedNodesInOrder.push(curNode); \r\n                break; \r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder; \r\n}\r\n\r\n//return a list of nodes in ascending distance order\r\n//return a list of prefix sums of node distances in reverse order \r\nfunction getNeighbors(node,grid,endNode) {\r\n    const neighbors = []; \r\n    const neighborDists = []; \r\n    const dir = [[1,0],[-1,0],[0,-1],[0,1]];\r\n    const expo = 10; \r\n    for(let i = 0; i < 4; i++) {\r\n        const nextRow = node.row + dir[i][0]; \r\n        const nextCol = node.col + dir[i][1]; \r\n        if(nextRow >= 0 && nextRow <= grid.length-1 && nextCol >=0 && nextCol <= grid[0].length-1 && !grid[nextRow][nextCol].isWall) {\r\n            neighbors.push(grid[nextRow][nextCol]); \r\n        }\r\n    } \r\n    sortByDist(neighbors); \r\n    var neighborDist = 0;\r\n    for(let i = neighbors.length-1; i >= 0; i--) {\r\n        neighborDist += Math.pow(neighbors[i].dist,expo); \r\n        neighborDists.push(neighborDist);\r\n    }\r\n    return [neighbors,neighborDists]; \r\n}\r\n\r\n//sort nodes by distance in ascending order \r\nfunction sortByDist(neighbors) {\r\n    neighbors.sort((nodeA, nodeB) => nodeA.dist - nodeB.dist); \r\n}\r\n\r\n//initally set the distances of all nodes \r\nfunction updateDist(grid,endNode) {\r\n    for(const row of grid) {\r\n        for(const node of row) {\r\n            node.dist = Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col);\r\n        }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport Neuron from './Neuron/Neuron';\r\nimport {nematode} from '../Algorithms/Nematode'; \r\n\r\nimport './PathFindingVisualizer.css';\r\n\r\nconst START_ROW = 0; \r\nconst START_COL = 0; \r\nconst END_ROW = 19; \r\nconst END_COL = 49; \r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            circuit: [], \r\n            mouseIsPressed: false, \r\n        }; \r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid(); \r\n        const circuit = getInitialCircuit(); \r\n        this.setState({grid,circuit});\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid, mouseIsPressed: true});\r\n    }\r\n    \r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed) return;\r\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({grid: newGrid});\r\n    }\r\n    \r\n    handleMouseUp() {\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    visualizeNematode() {\r\n        const {grid} = this.state; \r\n        const startNode = grid[START_ROW][START_COL]; \r\n        const endNode = grid[END_ROW][END_COL]; \r\n        const visitedNodesInOrder = nematode(grid,startNode,endNode);\r\n        this.animateNematode(visitedNodesInOrder);  \r\n    }\r\n\r\n    animateNematode(visitedNodesInOrder) {\r\n        for(let i=0; i<visitedNodesInOrder.length-1; i++) {\r\n            const node = visitedNodesInOrder[i];\r\n            const prev = i===0 ? 1000 : visitedNodesInOrder[i-1].dist; \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                if(node.dist > prev) {\r\n                    document.getElementById(`neuron-AWC`).className = 'neuron green';\r\n                    document.getElementById(`neuron-AIB`).className = 'inter-neuron red';\r\n                    document.getElementById(`neuron-AIY`).className = 'inter-neuron off';\r\n                }\r\n                else {\r\n                    document.getElementById(`neuron-AWC`).className = 'neuron off';\r\n                    document.getElementById(`neuron-AIB`).className = 'inter-neuron off';\r\n                    document.getElementById(`neuron-AIY`).className = 'inter-neuron blue';\r\n                }\r\n            }, 50 * (i+1) - 50); \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-seen';\r\n            }, 50 * (i+1) - 25); \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid,circuit,mouseIsPressed} = this.state; \r\n        return (\r\n            <>\r\n            <button onClick={() => this.visualizeNematode()}>\r\n                Visualize Nematode\r\n            </button>\r\n            <div className = \"grid\"> \r\n                {grid.map((row,rowIdx) => {\r\n                    return <div key={rowIdx}>\r\n                        {row.map((node,nodeIdx) => {\r\n                            const {row,col,isStart,isEnd,isWall} = node; \r\n                            return (\r\n                                <Node\r\n                                key = {nodeIdx}\r\n                                row = {row}\r\n                                col = {col}\r\n                                isStart = {isStart}\r\n                                isEnd = {isEnd}\r\n                                isWall={isWall}\r\n                                mouseIsPressed={mouseIsPressed}\r\n                                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                onMouseEnter={(row, col) =>\r\n                                  this.handleMouseEnter(row, col)\r\n                                }\r\n                                onMouseUp={() => this.handleMouseUp()}\r\n                                ></Node>\r\n                            );\r\n                        })}\r\n                    </div> \r\n                })}\r\n            </div> \r\n            <div className = \"circuit\"> \r\n                {circuit.map((col,colIdx) => {\r\n                    return <div key={colIdx} className=\"container\">\r\n                        {col.map((neuron,neuronIdx) => {\r\n                            const {tag} = neuron;\r\n                            return (\r\n                                <Neuron \r\n                                key = {neuronIdx}\r\n                                tag = {tag}\r\n                                ></Neuron> \r\n                            );\r\n                        })}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst createNode = (row,col) => {\r\n    return {\r\n        row, \r\n        col, \r\n        isStart : row === START_ROW && col === START_COL,\r\n        isEnd : row === END_ROW && col === END_COL,  \r\n        dist : Infinity, \r\n    };\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\nconst createNeuron = (tag) => {\r\n    return {\r\n        tag, \r\n    };\r\n};\r\n\r\nconst getInitialCircuit = () => {\r\n    const circuit = []; \r\n    const col_1 = []; \r\n    col_1.push(createNeuron('AWC'));\r\n    const col_3 = []; \r\n    col_3.push(createNeuron('AIB'));\r\n    col_3.push(createNeuron('AIY'));\r\n    circuit.push(col_1);\r\n    circuit.push(col_3); \r\n    return circuit; \r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\n\nfunction App() {\n  const [vizKey,setVizKey] = useState(0); \n  const reset = () => {\n    setVizKey(vizKey+1);\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={reset}>\n        Reset\n      </button>\n      <PathFindingVisualizer key = {vizKey}></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}