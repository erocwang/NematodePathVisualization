{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","PathFindingVisualizer/Neuron/Neuron.jsx","Algorithms/Nematode.js","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isStart","coloring","isEnd","id","className","Component","Neuron","tag","type","nematode","grid","startNode","endNode","maxDist","node","dist","Math","abs","updateDist","visitedNodesInOrder","curNode","getNeighbors","neighbors","neighborDists","totalDist","length","r","random","i","push","neighborDist","pow","PathFindingVisualizer","circuit","getInitialGrid","getInitialCircuit","setState","animateNematode","prev","setTimeout","document","getElementById","onClick","visualizeNematode","map","rowIdx","nodeIdx","colIdx","neuron","neuronIdx","createNode","Infinity","currentRow","createNeuron","col_1","col_3","App","useState","vizKey","setVizKey","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1b3b3c75.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}; \r\n    }\r\n\r\n    render() {\r\n        const {\r\n            row, \r\n            col, \r\n            isStart,\r\n            isEnd,\r\n        } = this.props; \r\n        const coloring = isEnd ? 'node-end' : isStart ? 'node-start' : '';\r\n        return (\r\n            <div \r\n                id = {`node-${row}-${col}`}\r\n                className={`node ${coloring}`}> \r\n            </div> \r\n        );\r\n    }\r\n}","import React , {Component} from 'react';\r\nimport './Neuron.css';\r\n\r\nexport default class Neuron extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}; \r\n    }\r\n\r\n    render() {\r\n        const {\r\n            tag,\r\n        } = this.props; \r\n        const type = tag==='AWC' ? 'neuron' : 'inter-neuron';\r\n        return (\r\n            <div \r\n                id = {`neuron-${tag}`}\r\n                className = {`${type}`}>\r\n                {tag}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n//yo the css subclasses have to be underneath the higher ones ","export function nematode(grid,startNode,endNode) {\r\n    updateDist(grid,endNode); \r\n    const visitedNodesInOrder = [];\r\n    var curNode = startNode;  \r\n    while((curNode!==endNode)) {    \r\n        const [neighbors,neighborDists] = getNeighbors(curNode,grid,endNode);\r\n        const totalDist = neighborDists[neighborDists.length-1]; \r\n        const r = Math.random()*totalDist; \r\n        for(let i=0; i<neighborDists.length; i++) {\r\n            if(r <= neighborDists[i]) {\r\n                curNode = neighbors[i];\r\n                visitedNodesInOrder.push(curNode); \r\n                break; \r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder; \r\n}\r\n\r\n// sort the nodes by distance, then grab the corresponding distances and put into list, reverse this distance list and use that mapping to determine randomization weightings \r\nfunction getNeighbors(node,grid,endNode) {\r\n    const neighbors = []; \r\n    const neighborDists = []; \r\n    const {row,col} = node; \r\n    var neighborDist = 0;\r\n    const expo = 5; \r\n    if(row>0) {\r\n        neighbors.push(grid[row-1][col]);\r\n        if(Math.abs(endNode.row-grid[row-1][col].row) + Math.abs(endNode.col-grid[row-1][col].col) > Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col))  neighborDist+=Math.pow(grid[row-1][col].dist/2,expo);\r\n        else neighborDist+=Math.pow(grid[row-1][col].dist,expo); \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(row<grid.length-1) {\r\n        neighbors.push(grid[row+1][col]);\r\n        if(Math.abs(endNode.row-grid[row+1][col].row) + Math.abs(endNode.col-grid[row+1][col].col) > Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col))  neighborDist+=Math.pow(grid[row+1][col].dist/2,expo);\r\n        else neighborDist+=Math.pow(grid[row+1][col].dist,expo); \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(col>0) {\r\n        neighbors.push(grid[row][col-1]);\r\n        if(Math.abs(endNode.row-grid[row][col-1].row) + Math.abs(endNode.col-grid[row][col-1].col) > Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col))  neighborDist+=Math.pow(grid[row][col-1].dist/2,expo);\r\n        else neighborDist+=Math.pow(grid[row][col-1].dist,expo); \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    if(col<grid[0].length-1) {\r\n        neighbors.push(grid[row][col+1]); \r\n        if(Math.abs(endNode.row-grid[row][col+1].row) + Math.abs(endNode.col-grid[row][col+1].col) > Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col))  neighborDist+=Math.pow(grid[row][col+1].dist/2,expo);\r\n        else neighborDist+=Math.pow(grid[row][col+1].dist,expo); \r\n        neighborDists.push(neighborDist); \r\n    }\r\n    return [neighbors,neighborDists]; \r\n}\r\n\r\nfunction updateDist(grid,endNode) {\r\n    const maxDist = endNode.row+endNode.col; \r\n    for(const row of grid) {\r\n        for(const node of row) {\r\n            node.dist = maxDist - (Math.abs(endNode.row-node.row) + Math.abs(endNode.col-node.col));\r\n        }\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport Neuron from './Neuron/Neuron';\r\nimport {nematode} from '../Algorithms/Nematode'; \r\n\r\nimport './PathFindingVisualizer.css';\r\n\r\nconst START_ROW = 0; \r\nconst START_COL = 0; \r\nconst END_ROW = 19; \r\nconst END_COL = 49; \r\n\r\nexport default class PathFindingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            circuit: [], \r\n        }; \r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid(); \r\n        const circuit = getInitialCircuit(); \r\n        this.setState({grid,circuit});\r\n    }\r\n\r\n    visualizeNematode() {\r\n        const {grid} = this.state; \r\n        const startNode = grid[START_ROW][START_COL]; \r\n        const endNode = grid[END_ROW][END_COL]; \r\n        const visitedNodesInOrder = nematode(grid,startNode,endNode);\r\n        this.animateNematode(visitedNodesInOrder);  \r\n    }\r\n\r\n    animateNematode(visitedNodesInOrder) {\r\n        for(let i=0; i<visitedNodesInOrder.length-1; i++) {\r\n            const node = visitedNodesInOrder[i];\r\n            const prev = i===0 ? 1000 : visitedNodesInOrder[i-1].dist; \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                if(node.dist > prev) {\r\n                    document.getElementById(`neuron-AWC`).className = 'neuron green';\r\n                    document.getElementById(`neuron-AIB`).className = 'inter-neuron red';\r\n                    document.getElementById(`neuron-AIY`).className = 'inter-neuron off';\r\n                }\r\n                else {\r\n                    document.getElementById(`neuron-AWC`).className = 'neuron off';\r\n                    document.getElementById(`neuron-AIB`).className = 'inter-neuron off';\r\n                    document.getElementById(`neuron-AIY`).className = 'inter-neuron blue';\r\n                }\r\n            }, 50 * (i+1) - 50); \r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-seen';\r\n            }, 50 * (i+1) - 25); \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {grid,circuit} = this.state; \r\n        return (\r\n            <>\r\n            <button onClick={() => this.visualizeNematode()}>\r\n                Visualize Nematode\r\n            </button>\r\n            <div className = \"grid\"> \r\n                {grid.map((row,rowIdx) => {\r\n                    return <div key={rowIdx}>\r\n                        {row.map((node,nodeIdx) => {\r\n                            const {row,col,isStart,isEnd} = node; \r\n                            return (\r\n                                <Node\r\n                                key = {nodeIdx}\r\n                                row = {row}\r\n                                col = {col}\r\n                                isStart = {isStart}\r\n                                isEnd = {isEnd}\r\n                                ></Node>\r\n                            );\r\n                        })}\r\n                    </div> \r\n                })}\r\n            </div> \r\n            <div className = \"circuit\"> \r\n                {circuit.map((col,colIdx) => {\r\n                    return <div key={colIdx} className=\"container\">\r\n                        {col.map((neuron,neuronIdx) => {\r\n                            const {tag} = neuron;\r\n                            return (\r\n                                <Neuron \r\n                                key = {neuronIdx}\r\n                                tag = {tag}\r\n                                ></Neuron> \r\n                            );\r\n                        })}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst createNode = (row,col) => {\r\n    return {\r\n        row, \r\n        col, \r\n        isStart : row === START_ROW && col === START_COL,\r\n        isEnd : row === END_ROW && col === END_COL,  \r\n        dist : Infinity, \r\n    };\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        currentRow.push(createNode(row, col));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\nconst createNeuron = (tag) => {\r\n    return {\r\n        tag, \r\n    };\r\n};\r\n\r\nconst getInitialCircuit = () => {\r\n    const circuit = []; \r\n    const col_1 = []; \r\n    col_1.push(createNeuron('AWC'));\r\n    const col_3 = []; \r\n    col_3.push(createNeuron('AIB'));\r\n    col_3.push(createNeuron('AIY'));\r\n    circuit.push(col_1);\r\n    circuit.push(col_3); \r\n    return circuit; \r\n};\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\n\nfunction App() {\n  const [vizKey,setVizKey] = useState(0); \n  const reset = () => {\n    setVizKey(vizKey+1);\n  }\n  return (\n    <div className=\"App\">\n      <button onClick={reset}>\n        Reset\n      </button>\n      <PathFindingVisualizer key = {vizKey}></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}